[
  {
    "Id": "1017210",
    "ThreadId": "437084",
    "Html": "I have created a version of PHPWord which allows to generate Word documents with embedded .xls. .xlsx, .doc. .docx. .ppt and .pptx files. It's not capable to attach PDFs because PDFs have to be transformed by wrapping them with something (some data added at the beginning and end of the PDF file) and I couldn't find out how to do this transformation.\r<br />\n<br />\nThe modification involved changes to these files:\r<br />\nPHPWord directory:<br />\n<ul>\n<li>Media.php</li>\n<li>\nSection.php<br />\n</li>\n</ul>\nPHPWord/_staticDocParts directory: added PNG image files for xlsx, docx and pptx (simply duplicated the existing xls, doc and ppt PNGs)\r<br />\n<br />\nPHPWord/Section directory:<br />\n<ul>\n<li>\nObject.php<br />\n</li>\n</ul>\nPHPWord/Section/Table directory:<br />\n<ul>\n<li>\nCell.php<br />\n</li>\n</ul>\nPHPWord/Writer directory:<br />\n<ul>\n<li>\nWord2007.php<br />\n</li>\n</ul>\nPHPWord/Writer/Word2007 directory:<br />\n<ul>\n<li>Document.php</li>\n<li>DocumentRels.php</li>\n<li>\nContentTypes.php<br />\n</li>\n</ul>\nIf anybody would like to have this version of PHPWord, just let me know.<br />\n",
    "PostedDate": "2013-03-18T10:34:40.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027237",
    "ThreadId": "437084",
    "Html": "Since i received a request for this version of PHPWord, but don't know how to post a new version of PHPWord here, I'll simply post as a reply to this message the source code of the files I modified. The replies to this message contain the source code of the files listed in my first post.<br />\n",
    "PostedDate": "2013-04-08T07:45:03.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027238",
    "ThreadId": "437084",
    "Html": "File media.php in PHPWord directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>PHPWord_Media\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>\n@copyright  Copyright (c) 2011 PHPWord\r<br />\n */\r<br />\nclass PHPWord_Media {<br />\n<br />\n/**<br />\n<ul>\n<li>Section Media Elements</li>\n<li></li>\n<li>\n@var array<br />\n */<br />\nprivate static $_sectionMedia = array('images'=&gt;array(),<br />\n<pre><code>                              'embeddings'=&gt;array(),\n                              'links'=&gt;array());\n</code></pre>\n\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Header Media Elements</li>\n<li></li>\n<li>\n@var array<br />\n */<br />\nprivate static $_headerMedia = array();<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Footer Media Elements</li>\n<li></li>\n<li>\n@var array<br />\n */<br />\nprivate static $_footerMedia = array();<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>ObjectID Counter</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate static $_objectId = 1325353440;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add new Section Media Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>@param string $type</li>\n<li></li>\n<li>\n@return mixed<br />\n */<br />\npublic static function addSectionMediaElement($src, $type, PHPWord_Section_MemoryImage $memoryImage = null) {<br />\n$mediaId = md5($src);<br />\n$type = strtolower($type);<br />\n$key = ($type == 'image') ? 'images' : 'embeddings';<br />\n$oleobject = in_array ($type, array ('xls', 'xlsx', 'doc', 'docx', 'ppt', 'pptx'));<br />\n<br />\nif(!array_key_exists($mediaId, self::$_sectionMedia[$key])) {<br />\n<pre><code>$cImg = self::countSectionMediaElements('images');\n$cObj = self::countSectionMediaElements('embeddings');\n$rID = self::countSectionMediaElements() + 7;\n\n$media = array();\n\nif($type == 'image') {\n    $cImg++;\n    $inf = pathinfo($src);\n    $isMemImage = (substr(strtolower($inf['extension']), 0, 3) == 'php' &amp;&amp; $type == 'image') ? true : false;\n\n    if($isMemImage) {\n        $ext = $memoryImage-&gt;getImageExtension();\n        $media['isMemImage'] = true;\n        $media['createfunction'] = $memoryImage-&gt;getImageCreateFunction();\n        $media['imagefunction'] = $memoryImage-&gt;getImageFunction();\n    } else {\n        $ext = $inf['extension'];\n        if($ext == 'jpeg') { // Office crashes when adding a jpEg Image, so rename to jpg\n            $ext = 'jpg';\n        }\n    }\n\n    $folder = 'media';\n    $file = $type.$cImg.'.'.strtolower($ext);\n// } elseif($type == 'oleObject') {\n} elseif ($oleobject) {         \n    $cObj++;\n    $folder = 'embedding';\n    // $file = $type.$cObj.'.bin';\n    $file = $type.$cObj.&quot;.$type&quot;;\n}\n\n$media['source'] = $src;\n$media['target'] = &quot;$folder/section_$file&quot;;\n$media['type'] = $type;\n$media['rID'] = $rID;\n\nself::$_sectionMedia[$key][$mediaId] = $media;\n\n// if($type == 'oleObject') {\nif($oleobject) {\n    return array($rID, ++self::$_objectId);\n} else {\n    return $rID;\n}</code></pre>\n\n} else {<br />\n<pre><code>// if($type == 'oleObject') {\nif ($oleobject) {\n    $rID = self::$_sectionMedia[$key][$mediaId]['rID'];\n    return array($rID, ++self::$_objectId);\n} else {\n    return self::$_sectionMedia[$key][$mediaId]['rID'];\n}</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add new Section Link Element</li>\n<li></li>\n<li>@param string $linkSrc</li>\n<li>@param string $linkName</li>\n<li></li>\n<li>\n@return mixed<br />\n */<br />\npublic static function addSectionLinkElement($linkSrc) {<br />\n$rID = self::countSectionMediaElements() + 7;<br />\n<br />\n$link = array();<br />\n$link['target'] = $linkSrc;<br />\n$link['rID'] = $rID;<br />\n$link['type'] = 'hyperlink';<br />\n<br />\nself::$_sectionMedia['links'][] = $link;<br />\n<br />\nreturn $rID;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Section Media Elements</li>\n<li></li>\n<li>@param string $key</li>\n<li>\n@return array<br />\n */<br />\npublic static function getSectionMediaElements($key = null) {<br />\nif(!is_null($key)) {<br />\n<pre><code>return self::$_sectionMedia[$key];</code></pre>\n\n} else {<br />\n<pre><code>$arrImages = self::$_sectionMedia['images'];\n$arrObjects = self::$_sectionMedia['embeddings'];\n$arrLinks = self::$_sectionMedia['links'];\nreturn array_merge($arrImages, $arrObjects, $arrLinks);</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Section Media Elements Count</li>\n<li></li>\n<li>@param string $key</li>\n<li>\n@return int<br />\n */<br />\npublic static function countSectionMediaElements($key = null) {<br />\nif(!is_null($key)) {<br />\n<pre><code>return count(self::$_sectionMedia[$key]);</code></pre>\n\n} else {<br />\n<pre><code>$cImages = count(self::$_sectionMedia['images']);\n$cObjects = count(self::$_sectionMedia['embeddings']);\n$cLinks = count(self::$_sectionMedia['links']);\nreturn ($cImages + $cObjects + $cLinks);</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add new Header Media Element</li>\n<li></li>\n<li>@param int $headerCount</li>\n<li>@param string $src</li>\n<li>\n@return int<br />\n */<br />\npublic static function addHeaderMediaElement($headerCount, $src, PHPWord_Section_MemoryImage $memoryImage = null) {<br />\n$mediaId = md5($src);<br />\n$key = 'header'.$headerCount;<br />\n<br />\nif(!array_key_exists($key, self::$_headerMedia)) {<br />\n<pre><code>self::$_headerMedia[$key] = array();</code></pre>\n\n}<br />\n<br />\nif(!array_key_exists($mediaId, self::$_headerMedia[$key])) {<br />\n<pre><code>$cImg = self::countHeaderMediaElements($key);\n$rID = $cImg + 1;\n\n$cImg++;\n$inf = pathinfo($src);\n$isMemImage = (substr(strtolower($inf['extension']), 0, 3) == 'php') ? true : false;\n\n$media = array();\nif($isMemImage) {\n    $ext = $memoryImage-&gt;getImageExtension();\n    $media['isMemImage'] = true;\n    $media['createfunction'] = $memoryImage-&gt;getImageCreateFunction();\n    $media['imagefunction'] = $memoryImage-&gt;getImageFunction();\n} else {\n    $ext = $inf['extension'];\n    if($ext == 'jpeg') { // Office crashes when adding a jpEg Image, so rename to jpg\n        $ext = 'jpg';\n    }\n}\n$file = 'image'.$cImg.'.'.strtolower($ext);\n\n$media['source'] = $src;\n$media['target'] = 'media/'.$key.'_'.$file;\n$media['type'] = 'image';\n$media['rID'] = $rID;\n\nself::$_headerMedia[$key][$mediaId] = $media;\n\nreturn $rID;</code></pre>\n\n} else {<br />\n<pre><code>return self::$_headerMedia[$key][$mediaId]['rID'];</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Header Media Elements Count</li>\n<li></li>\n<li>@param string $key</li>\n<li>\n@return int<br />\n */<br />\npublic static function countHeaderMediaElements($key) {<br />\nreturn count(self::$_headerMedia[$key]);<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Header Media Elements</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic static function getHeaderMediaElements() {<br />\nreturn self::$_headerMedia;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add new Footer Media Element</li>\n<li></li>\n<li>@param int $footerCount</li>\n<li>@param string $src</li>\n<li>\n@return int<br />\n */<br />\npublic static function addFooterMediaElement($footerCount, $src, PHPWord_Section_MemoryImage $memoryImage = null) {<br />\n$mediaId = md5($src);<br />\n$key = 'footer'.$footerCount;<br />\n<br />\nif(!array_key_exists($key, self::$_footerMedia)) {<br />\n<pre><code>self::$_footerMedia[$key] = array();</code></pre>\n\n}<br />\n<br />\nif(!array_key_exists($mediaId, self::$_footerMedia[$key])) {<br />\n<pre><code>$cImg = self::countFooterMediaElements($key);\n$rID = $cImg + 1;\n\n$cImg++;\n$inf = pathinfo($src);\n$isMemImage = (substr(strtolower($inf['extension']), 0, 3) == 'php') ? true : false;\n\n$media = array();\nif($isMemImage) {\n    $ext = $memoryImage-&gt;getImageExtension();\n    $media['isMemImage'] = true;\n    $media['createfunction'] = $memoryImage-&gt;getImageCreateFunction();\n    $media['imagefunction'] = $memoryImage-&gt;getImageFunction();\n} else {\n    $ext = $inf['extension'];\n    if($ext == 'jpeg') { // Office crashes when adding a jpEg Image, so rename to jpg\n        $ext = 'jpg';\n    }\n}\n$file = 'image'.$cImg.'.'.strtolower($ext);\n\n$media['source'] = $src;\n$media['target'] = 'media/'.$key.'_'.$file;\n$media['type'] = 'image';\n$media['rID'] = $rID;\n\nself::$_footerMedia[$key][$mediaId] = $media;\n\nreturn $rID;</code></pre>\n\n} else {<br />\n<pre><code>return self::$_footerMedia[$key][$mediaId]['rID'];</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Footer Media Elements Count</li>\n<li></li>\n<li>@param string $key</li>\n<li>\n@return int<br />\n */<br />\npublic static function countFooterMediaElements($key) {<br />\nreturn count(self::$_footerMedia[$key]);<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Footer Media Elements</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic static function getFooterMediaElements() {<br />\nreturn self::$_footerMedia;<br />\n}<br />\n}\r<br />\n?&gt;\n</li>\n</ul>\n</li>\n</ul>\n",
    "PostedDate": "2013-04-08T07:46:35.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027241",
    "ThreadId": "437084",
    "Html": "File section.php in PHPWord directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>PHPWord_Section\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord_Section</li>\n<li>\n@copyright  Copyright (c) 2011 PHPWord\r<br />\n */\r<br />\nclass PHPWord_Section {<br />\n<br />\n/**<br />\n<ul>\n<li>Section count</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_sectionCount;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Section settings</li>\n<li></li>\n<li>\n@var PHPWord_Section_Settings<br />\n */<br />\nprivate $_settings;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Section Element Collection</li>\n<li></li>\n<li>\n@var array<br />\n */<br />\nprivate $_elementCollection = array();<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Section Header</li>\n<li></li>\n<li>\n@var PHPWord_Section_Header<br />\n */<br />\nprivate $_header = null;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Section Footer</li>\n<li></li>\n<li>\n@var PHPWord_Section_Footer<br />\n */<br />\nprivate $_footer = null;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new Section</li>\n<li></li>\n<li>@param int $sectionCount</li>\n<li>\n@param mixed $settings<br />\n */<br />\npublic function __construct($sectionCount, $settings = null) {<br />\n$this-&gt;_sectionCount = $sectionCount;<br />\n$this-&gt;_settings = new PHPWord_Section_Settings();<br />\n<br />\nif(!is_null($settings) &amp;&amp; is_array($settings)) {<br />\n<pre><code>foreach($settings as $key =&gt; $value) {\n    if(substr($key, 0, 1) != '_') {\n        $key = '_'.$key;\n    }\n    $this-&gt;_settings-&gt;setSettingValue($key, $value);\n}</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Section Settings</li>\n<li></li>\n<li>\n@return PHPWord_Section_Settings<br />\n */<br />\npublic function getSettings() {<br />\nreturn $this-&gt;_settings;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Text Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param mixed $styleFont</li>\n<li>@param mixed $styleParagraph</li>\n<li>\n@return PHPWord_Section_Text<br />\n */<br />\npublic function addText($text, $styleFont = null, $styleParagraph = null) {<br />\n$givenText = utf8_encode($text);<br />\n$text = new PHPWord_Section_Text($givenText, $styleFont, $styleParagraph);<br />\n$this-&gt;_elementCollection[] = $text;<br />\nreturn $text;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Link Element</li>\n<li></li>\n<li>@param string $linkSrc</li>\n<li>@param string $linkName</li>\n<li>@param mixed $styleFont</li>\n<li>@param mixed $styleParagraph</li>\n<li>\n@return PHPWord_Section_Link<br />\n */<br />\npublic function addLink($linkSrc, $linkName = null, $styleFont = null, $styleParagraph = null) {<br />\n$linkSrc = utf8_encode($linkSrc);<br />\nif(!is_null($linkName)) {<br />\n<pre><code>$linkName = utf8_encode($linkName);</code></pre>\n\n}<br />\n<br />\n$link = new PHPWord_Section_Link($linkSrc, $linkName, $styleFont, $styleParagraph);<br />\n$rID = PHPWord_Media::addSectionLinkElement($linkSrc);<br />\n$link-&gt;setRelationId($rID);<br />\n<br />\n$this-&gt;_elementCollection[] = $link;<br />\nreturn $link;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a TextBreak Element</li>\n<li></li>\n<li>\n@param int $count<br />\n */<br />\npublic function addTextBreak($count = 1) {<br />\nfor($i=1; $i&lt;=$count; $i++) {<br />\n<pre><code>$this-&gt;_elementCollection[] = new PHPWord_Section_TextBreak();</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>\nAdd a PageBreak Element<br />\n */<br />\npublic function addPageBreak() {<br />\n$this-&gt;_elementCollection[] = new PHPWord_Section_PageBreak();<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Table Element</li>\n<li></li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Table<br />\n */<br />\npublic function addTable($style = null) {<br />\n$table = new PHPWord_Section_Table('section', $this-&gt;_sectionCount, $style);<br />\n$this-&gt;_elementCollection[] = $table;<br />\nreturn $table;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a ListItem Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param int $depth</li>\n<li>@param mixed $styleFont</li>\n<li>@param mixed $styleList</li>\n<li>@param mixed $styleParagraph</li>\n<li>\n@return PHPWord_Section_ListItem<br />\n */<br />\npublic function addListItem($text, $depth = 0, $styleFont = null, $styleList = null, $styleParagraph = null) {<br />\n$text = utf8_encode($text);<br />\n$listItem = new PHPWord_Section_ListItem($text, $depth, $styleFont, $styleList, $styleParagraph);<br />\n$this-&gt;_elementCollection[] = $listItem;<br />\nreturn $listItem;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a OLE-Object Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Object<br />\n */<br />\npublic function addObject($src, $style = null) {<br />\n<br />\n$object = new PHPWord_Section_Object($src, $style);<br />\n<br />\nif(!is_null($object-&gt;getSource())) {<br />\n<pre><code>$inf = pathinfo($src);\n$ext = strtolower($inf['extension']);\n// if(strlen($ext) == 4 &amp;&amp; strtolower(substr($ext, -1)) == 'x') {\n//  $ext = substr($ext, 0, -1);\n// }\n\n$iconSrc = PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/';\nif(!file_exists($iconSrc.'_'.$ext.'.png')) {\n    $iconSrc = $iconSrc.'_default.png';\n} else {\n    $iconSrc .= '_'.$ext.'.png';\n}\n\n$rIDimg = PHPWord_Media::addSectionMediaElement($iconSrc, 'image');\n$data = PHPWord_Media::addSectionMediaElement($src, $ext);\n$rID = $data[0];\n$objectId = $data[1];\n\n$object-&gt;setRelationId($rID);\n$object-&gt;setObjectId($objectId);\n$object-&gt;setImageRelationId($rIDimg);\n\n$this-&gt;_elementCollection[] = $object;\nreturn $object;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Source does not exist or unsupported object type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Image Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Image<br />\n */<br />\npublic function addImage($src, $style = null) {<br />\n$image = new PHPWord_Section_Image($src, $style);<br />\n<br />\nif(!is_null($image-&gt;getSource())) {<br />\n<pre><code>$rID = PHPWord_Media::addSectionMediaElement($src, 'image');\n$image-&gt;setRelationId($rID);\n\n$this-&gt;_elementCollection[] = $image;\nreturn $image;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Source does not exist or unsupported image type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a by PHP created Image Element</li>\n<li></li>\n<li>@param string $link</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_MemoryImage<br />\n */<br />\npublic function addMemoryImage($link, $style = null) {<br />\n$memoryImage = new PHPWord_Section_MemoryImage($link, $style);<br />\nif(!is_null($memoryImage-&gt;getSource())) {<br />\n<pre><code>$rID = PHPWord_Media::addSectionMediaElement($link, 'image', $memoryImage);\n$memoryImage-&gt;setRelationId($rID);\n\n$this-&gt;_elementCollection[] = $memoryImage;\nreturn $memoryImage;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Unsupported image type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Table-of-Contents Element</li>\n<li></li>\n<li>@param mixed $styleFont</li>\n<li>@param mixed $styleTOC</li>\n<li>\n@return PHPWord_TOC<br />\n */<br />\npublic function addTOC($styleFont = null, $styleTOC = null) {<br />\n$toc = new PHPWord_TOC($styleFont, $styleTOC);<br />\n$this-&gt;_elementCollection[] = $toc;<br />\nreturn $toc;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Title Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param int $depth</li>\n<li>\n@return PHPWord_Section_Title<br />\n */<br />\npublic function addTitle($text, $depth = 1) {<br />\n$text = utf8_encode($text);<br />\n$styles = PHPWord_Style::getStyles();<br />\nif(array_key_exists('Heading_'.$depth, $styles)) {<br />\n<pre><code>$style = 'Heading'.$depth;</code></pre>\n\n} else {<br />\n<pre><code>$style = null;</code></pre>\n\n}<br />\n<br />\n$title = new PHPWord_Section_Title($text, $depth, $style);<br />\n<br />\n$data = PHPWord_TOC::addTitle($text, $depth);<br />\n$anchor = $data[0];<br />\n$bookmarkId = $data[1];<br />\n<br />\n$title-&gt;setAnchor($anchor);<br />\n$title-&gt;setBookmarkId($bookmarkId);<br />\n<br />\n$this-&gt;_elementCollection[] = $title;<br />\nreturn $title;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new TextRun</li>\n<li></li>\n<li>\n@return PHPWord_Section_TextRun<br />\n */<br />\npublic function createTextRun($styleParagraph = null) {<br />\n$textRun = new PHPWord_Section_TextRun($styleParagraph);<br />\n$this-&gt;_elementCollection[] = $textRun;<br />\nreturn $textRun;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get all Elements</li>\n<li></li>\n<li>\n@return array<br />\n */<br />\npublic function getElements() {<br />\nreturn $this-&gt;_elementCollection;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new Header</li>\n<li></li>\n<li>\n@return PHPWord_Section_Header<br />\n */<br />\npublic function createHeader() {<br />\n$header = new PHPWord_Section_Header($this-&gt;_sectionCount);<br />\n$this-&gt;_header = $header;<br />\nreturn $header;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Header</li>\n<li></li>\n<li>\n@return PHPWord_Section_Header<br />\n */<br />\npublic function getHeader() {<br />\nreturn $this-&gt;_header;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new Footer</li>\n<li></li>\n<li>\n@return PHPWord_Section_Footer<br />\n */<br />\npublic function createFooter() {<br />\n$footer = new PHPWord_Section_Footer($this-&gt;_sectionCount);<br />\n$this-&gt;_footer = $footer;<br />\nreturn $footer;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Footer</li>\n<li></li>\n<li>\n@return PHPWord_Section_Footer<br />\n */<br />\npublic function getFooter() {<br />\nreturn $this-&gt;_footer;<br />\n}<br />\n}\r<br />\n?&gt;\n</li>\n</ul>\n</li>\n</ul>\n",
    "PostedDate": "2013-04-08T07:48:56.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027243",
    "ThreadId": "437084",
    "Html": "File object.php in PHPWord/Section directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>PHPWord_Section_Object\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord_Section</li>\n<li>\n@copyright  Copyright (c) 2011 PHPWord\r<br />\n */\r<br />\nclass PHPWord_Section_Object {<br />\n<br />\n/**<br />\n<ul>\n<li>Ole-Object Src</li>\n<li></li>\n<li>\n@var string<br />\n */<br />\nprivate $_src;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Image Style</li>\n<li></li>\n<li>\n@var PHPWord_Style_Image<br />\n */<br />\nprivate $_style;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Object Relation ID</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_rId;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Image Relation ID</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_rIdImg;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Object ID</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_objId;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new Ole-Object Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>\n@param mixed $style<br />\n */<br />\npublic function __construct($src, $style = null) {<br />\n$_supportedObjectTypes = array('xls', 'xlsx', 'doc', 'docx', 'ppt', 'pptx');<br />\n$inf = pathinfo($src);<br />\n<br />\nif(file_exists($src) &amp;&amp; in_array($inf['extension'], $_supportedObjectTypes)) {<br />\n<pre><code>$this-&gt;_src = $src;\n$this-&gt;_style = new PHPWord_Style_Image();\n\nif(!is_null($style) &amp;&amp; is_array($style)) {\n    foreach($style as $key =&gt; $value) {\n        if(substr($key, 0, 1) != '_') {\n            $key = '_'.$key;\n        }\n        $this-&gt;_style-&gt;setStyleValue($key, $value);\n    }\n}\n\nreturn $this;</code></pre>\n\n} else {<br />\n<pre><code>return false;</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Image style</li>\n<li></li>\n<li>\n@return PHPWord_Style_Image<br />\n */<br />\npublic function getStyle() {<br />\nreturn $this-&gt;_style;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Source</li>\n<li></li>\n<li>\n@return string<br />\n */<br />\npublic function getSource() {<br />\nreturn $this-&gt;_src;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Object Relation ID</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic function getRelationId() {<br />\nreturn $this-&gt;_rId;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Set Object Relation ID</li>\n<li></li>\n<li>\n@param int $rId<br />\n */<br />\npublic function setRelationId($rId) {<br />\n$this-&gt;_rId = $rId;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Image Relation ID</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic function getImageRelationId() {<br />\nreturn $this-&gt;_rIdImg;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Set Image Relation ID</li>\n<li></li>\n<li>\n@param int $rId<br />\n */<br />\npublic function setImageRelationId($rId) {<br />\n$this-&gt;_rIdImg = $rId;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Object ID</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic function getObjectId() {<br />\nreturn $this-&gt;_objId;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Set Object ID</li>\n<li></li>\n<li>\n@param int $objId<br />\n */<br />\npublic function setObjectId($objId) {<br />\n$this-&gt;_objId = $objId;<br />\n}<br />\n}\r<br />\n?&gt;\n</li>\n</ul>\n</li>\n</ul>\n",
    "PostedDate": "2013-04-08T07:49:49.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027245",
    "ThreadId": "437084",
    "Html": "File cell.php in PHPWord/Section/Table directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>PHPWord_Section_Table_Cell\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord_Section_Table</li>\n<li>\n@copyright  Copyright (c) 2011 PHPWord\r<br />\n */\r<br />\nclass PHPWord_Section_Table_Cell {<br />\n<br />\n/**<br />\n<ul>\n<li>Cell Width</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_width = null;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Cell Style</li>\n<li></li>\n<li>\n@var PHPWord_Style_Cell<br />\n */<br />\nprivate $_style;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Cell Element Collection</li>\n<li></li>\n<li>\n@var array<br />\n */<br />\nprivate $_elementCollection = array();<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Table holder</li>\n<li></li>\n<li>\n@var string<br />\n */<br />\nprivate $_insideOf;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Section/Header/Footer count</li>\n<li></li>\n<li>\n@var int<br />\n */<br />\nprivate $_pCount;<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new Table Cell</li>\n<li></li>\n<li>@param string $insideOf</li>\n<li>@param int $pCount</li>\n<li>@param int $width</li>\n<li>\n@param mixed $style<br />\n */<br />\npublic function __construct($insideOf, $pCount, $width = null, $style = null) {<br />\n$this-&gt;_insideOf = $insideOf;<br />\n$this-&gt;_pCount = $pCount;<br />\n$this-&gt;_width = $width;<br />\n<br />\nif(!is_null($style)) {<br />\n<pre><code>if(is_array($style)) {\n    $this-&gt;_style = new PHPWord_Style_Cell();\n\n    foreach($style as $key =&gt; $value) {\n        if(substr($key, 0, 1) != '_') {\n            $key = '_'.$key;\n        }\n        $this-&gt;_style-&gt;setStyleValue($key, $value);\n    }\n} else {\n    $this-&gt;_style = $style;\n}</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Text Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Text<br />\n */<br />\npublic function addText($text, $styleFont = null, $styleParagraph = null) {<br />\n$text = utf8_encode($text);<br />\n$text = new PHPWord_Section_Text($text, $styleFont, $styleParagraph);<br />\n$this-&gt;_elementCollection[] = $text;<br />\nreturn $text;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Link Element</li>\n<li></li>\n<li>@param string $linkSrc</li>\n<li>@param string $linkName</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Link<br />\n */<br />\npublic function addLink($linkSrc, $linkName = null, $style = null) {<br />\nif($this-&gt;_insideOf == 'section') {<br />\n<pre><code>$linkSrc = utf8_encode($linkSrc);\nif(!is_null($linkName)) {\n    $linkName = utf8_encode($linkName);\n}\n\n$link = new PHPWord_Section_Link($linkSrc, $linkName, $style);\n$rID = PHPWord_Media::addSectionLinkElement($linkSrc);\n$link-&gt;setRelationId($rID);\n\n$this-&gt;_elementCollection[] = $link;\nreturn $link;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Unsupported Link header / footer reference');\nreturn false;</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a TextBreak Element</li>\n<li></li>\n<li>\n@param int $count<br />\n */<br />\npublic function addTextBreak() {<br />\n$this-&gt;_elementCollection[] = new PHPWord_Section_TextBreak();<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a ListItem Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param int $depth</li>\n<li>@param mixed $styleText</li>\n<li>@param mixed $styleList</li>\n<li>\n@return PHPWord_Section_ListItem<br />\n */<br />\npublic function addListItem($text, $depth = 0, $styleText = null, $styleList = null) {<br />\n$text = utf8_encode($text);<br />\n$listItem = new PHPWord_Section_ListItem($text, $depth, $styleText, $styleList);<br />\n$this-&gt;_elementCollection[] = $listItem;<br />\nreturn $listItem;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a Image Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Image<br />\n */<br />\npublic function addImage($src, $style = null) {<br />\n$image = new PHPWord_Section_Image($src, $style);<br />\n<br />\nif(!is_null($image-&gt;getSource())) {<br />\n<pre><code>if($this-&gt;_insideOf == 'section') {\n    $rID = PHPWord_Media::addSectionMediaElement($src, 'image');\n} elseif($this-&gt;_insideOf == 'header') {\n    $rID = PHPWord_Media::addHeaderMediaElement($this-&gt;_pCount, $src);\n} elseif($this-&gt;_insideOf == 'footer') {\n    $rID = PHPWord_Media::addFooterMediaElement($this-&gt;_pCount, $src);\n}\n$image-&gt;setRelationId($rID);\n\n$this-&gt;_elementCollection[] = $image;\nreturn $image;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Source does not exist or unsupported image type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a by PHP created Image Element</li>\n<li></li>\n<li>@param string $link</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_MemoryImage<br />\n */<br />\npublic function addMemoryImage($link, $style = null) {<br />\n$memoryImage = new PHPWord_Section_MemoryImage($link, $style);<br />\nif(!is_null($memoryImage-&gt;getSource())) {<br />\n<pre><code>if($this-&gt;_insideOf == 'section') {\n    $rID = PHPWord_Media::addSectionMediaElement($link, 'image', $memoryImage);\n} elseif($this-&gt;_insideOf == 'header') {\n    $rID = PHPWord_Media::addHeaderMediaElement($this-&gt;_pCount, $link, $memoryImage);\n} elseif($this-&gt;_insideOf == 'footer') {\n    $rID = PHPWord_Media::addFooterMediaElement($this-&gt;_pCount, $link, $memoryImage);\n}\n$memoryImage-&gt;setRelationId($rID);\n\n$this-&gt;_elementCollection[] = $memoryImage;\nreturn $memoryImage;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Unsupported image type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a OLE-Object Element</li>\n<li></li>\n<li>@param string $src</li>\n<li>@param mixed $style</li>\n<li>\n@return PHPWord_Section_Object<br />\n */<br />\npublic function addObject($src, $style = null) {<br />\n<br />\n$object = new PHPWord_Section_Object($src, $style);<br />\n<br />\nif(!is_null($object-&gt;getSource())) {<br />\n<pre><code>$inf = pathinfo($src);\n$ext = strtolower($inf['extension']);\n//if(strlen($ext) == 4 &amp;&amp; strtolower(substr($ext, -1)) == 'x') {\n//  $ext = substr($ext, 0, -1);\n//}\n\n$iconSrc = PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/';\nif(!file_exists($iconSrc.'_'.$ext.'.png')) {\n    $iconSrc = $iconSrc.'_default.png';\n} else {\n    $iconSrc .= '_'.$ext.'.png';\n}\n\n$rIDimg = PHPWord_Media::addSectionMediaElement($iconSrc, 'image');\n$data = PHPWord_Media::addSectionMediaElement($src, $ext);\n$rID = $data[0];\n$objectId = $data[1];\n\n$object-&gt;setRelationId($rID);\n$object-&gt;setObjectId($objectId);\n$object-&gt;setImageRelationId($rIDimg);\n\n$this-&gt;_elementCollection[] = $object;\nreturn $object;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('Source does not exist or unsupported object type.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Add a PreserveText Element</li>\n<li></li>\n<li>@param string $text</li>\n<li>@param mixed $styleFont</li>\n<li>@param mixed $styleParagraph</li>\n<li>\n@return PHPWord_Section_Footer_PreserveText<br />\n */<br />\npublic function addPreserveText($text, $styleFont = null, $styleParagraph = null) {<br />\nif($this-&gt;_insideOf == 'footer' || $this-&gt;_insideOf == 'header') {<br />\n<pre><code>$text = utf8_encode($text);\n$ptext = new PHPWord_Section_Footer_PreserveText($text, $styleFont, $styleParagraph);\n$this-&gt;_elementCollection[] = $ptext;\nreturn $ptext;</code></pre>\n\n} else {<br />\n<pre><code>trigger_error('addPreserveText only supported in footer/header.');</code></pre>\n\n}<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Create a new TextRun</li>\n<li></li>\n<li>\n@return PHPWord_Section_TextRun<br />\n */<br />\npublic function createTextRun($styleParagraph = null) {<br />\n$textRun = new PHPWord_Section_TextRun($styleParagraph);<br />\n$this-&gt;_elementCollection[] = $textRun;<br />\nreturn $textRun;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get all Elements</li>\n<li></li>\n<li>\n@return array<br />\n */<br />\npublic function getElements() {<br />\nreturn $this-&gt;_elementCollection;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Cell Style</li>\n<li></li>\n<li>\n@return PHPWord_Style_Cell<br />\n */<br />\npublic function getStyle() {<br />\nreturn $this-&gt;_style;<br />\n}<br />\n</li>\n</ul>\n/**<br />\n<ul>\n<li>Get Cell width</li>\n<li></li>\n<li>\n@return int<br />\n */<br />\npublic function getWidth() {<br />\nreturn $this-&gt;_width;<br />\n}<br />\n}\r<br />\n?&gt;\n</li>\n</ul>\n</li>\n</ul>\n",
    "PostedDate": "2013-04-08T07:51:01.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027248",
    "ThreadId": "437084",
    "Html": "File word2007.php in PHPWord/Writer directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\nclass PHPWord_Writer_Word2007 implements PHPWord_Writer_IWriter {<br />\n<pre><code>private $_document;\nprivate $_writerParts;\nprivate $_diskCachingDirectory;\nprivate $_useDiskCaching = false;\nprivate $_imageTypes = array();\nprivate $_objectTypes = array();\n\npublic function __construct(PHPWord $PHPWord = null) {\n    $this-&gt;_document = $PHPWord;\n\n    $this-&gt;_diskCachingDirectory = './';\n\n    $this-&gt;_writerParts['contenttypes'] = new PHPWord_Writer_Word2007_ContentTypes();\n    $this-&gt;_writerParts['rels'] = new PHPWord_Writer_Word2007_Rels();\n    $this-&gt;_writerParts['docprops'] = new PHPWord_Writer_Word2007_DocProps();\n    $this-&gt;_writerParts['documentrels'] = new PHPWord_Writer_Word2007_DocumentRels();\n    $this-&gt;_writerParts['document'] = new PHPWord_Writer_Word2007_Document();\n    $this-&gt;_writerParts['styles'] = new PHPWord_Writer_Word2007_Styles();\n    $this-&gt;_writerParts['header'] = new PHPWord_Writer_Word2007_Header();\n    $this-&gt;_writerParts['footer'] = new PHPWord_Writer_Word2007_Footer();\n\n    foreach($this-&gt;_writerParts as $writer) {\n        $writer-&gt;setParentWriter($this);\n    }\n}\n\npublic function save($pFilename = null) {\n    if(!is_null($this-&gt;_document)) {\n\n        // If $pFilename is php://output or php://stdout, make it a temporary file...\n        $originalFilename = $pFilename;\n        if(strtolower($pFilename) == 'php://output' || strtolower($pFilename) == 'php://stdout') {\n            $pFilename = @tempnam('./', 'phppttmp');\n            if($pFilename == '') {\n                $pFilename = $originalFilename;\n            }\n        }\n\n        // Create new ZIP file and open it for writing\n        $objZip = new ZipArchive();\n\n        // Try opening the ZIP file\n        if($objZip-&gt;open($pFilename, ZIPARCHIVE::OVERWRITE) !== true) {\n            if($objZip-&gt;open($pFilename, ZIPARCHIVE::CREATE) !== true) {\n                throw new Exception(&quot;Could not open &quot; . $pFilename . &quot; for writing.&quot;);\n            }\n        }\n\n\n        $sectionElements = array();\n        $_secElements = PHPWord_Media::getSectionMediaElements();\n        $extensions = array ();\n        foreach($_secElements as $element) { // loop through section media elements\n            if($element['type'] != 'hyperlink') {\n                $this-&gt;_addFileToPackage($objZip, $element);\n                $inf = pathinfo($element['source']);\n                $ext = strtolower($inf['extension']);\n                $extensions[$ext] = true;\n            }\n            $sectionElements[] = $element;\n        }\n        $extensions = array_keys ($extensions);\n\n        $_hdrElements = PHPWord_Media::getHeaderMediaElements();\n        foreach($_hdrElements as $_headerFile =&gt; $_hdrMedia) { // loop through headers\n            if(count($_hdrMedia) &gt; 0) {\n                $objZip-&gt;addFromString('word/_rels/'.$_headerFile.'.xml.rels', $this-&gt;getWriterPart('documentrels')-&gt;writeHeaderFooterRels($_hdrMedia));\n                foreach($_hdrMedia as $element) { // loop through header media elements\n                    $this-&gt;_addFileToPackage($objZip, $element);\n                }\n            }\n        }\n\n        $_ftrElements = PHPWord_Media::getFooterMediaElements();\n        foreach($_ftrElements as $_footerFile =&gt; $_ftrMedia) { // loop through footers\n            if(count($_ftrMedia) &gt; 0) {\n                $objZip-&gt;addFromString('word/_rels/'.$_footerFile.'.xml.rels', $this-&gt;getWriterPart('documentrels')-&gt;writeHeaderFooterRels($_ftrMedia));\n                foreach($_ftrMedia as $element) { // loop through footers media elements\n                    $this-&gt;_addFileToPackage($objZip, $element);\n                }\n            }\n        }\n\n\n\n        $_cHdrs    = 0;\n        $_cFtrs    = 0;\n        $rID       = PHPWord_Media::countSectionMediaElements() + 6;\n        $_sections = $this-&gt;_document-&gt;getSections();\n\n        foreach($_sections as $section) {\n            $_header = $section-&gt;getHeader();\n            if(!is_null($_header)) {\n                $_cHdrs++;\n                $_header-&gt;setRelationId(++$rID);\n                $_headerCount = $_header-&gt;getHeaderCount();\n                $_headerFile = 'header'.$_headerCount.'.xml';\n                $sectionElements[] = array('target'=&gt;$_headerFile, 'type'=&gt;'header', 'rID'=&gt;$rID);\n                $objZip-&gt;addFromString('word/'.$_headerFile, $this-&gt;getWriterPart('header')-&gt;writeHeader($_header));\n            }\n\n            $_footer = $section-&gt;getFooter();\n            if(!is_null($_footer)) {\n                $_cFtrs++;\n                $_footer-&gt;setRelationId(++$rID);\n                $_footerCount = $_footer-&gt;getFooterCount();\n                $_footerFile = 'footer'.$_footerCount.'.xml';\n                $sectionElements[] = array('target'=&gt;$_footerFile, 'type'=&gt;'footer', 'rID'=&gt;$rID);\n                $objZip-&gt;addFromString('word/'.$_footerFile, $this-&gt;getWriterPart('footer')-&gt;writeFooter($_footer));\n            }\n        }\n\n        // build docx file\n        // Write dynamic files\n        // $objZip-&gt;addFromString('[Content_Types].xml', $this-&gt;getWriterPart('contenttypes')-&gt;writeContentTypes($this-&gt;_imageTypes, $this-&gt;_objectTypes, $_cHdrs, $_cFtrs));\n        $objZip-&gt;addFromString('[Content_Types].xml', $this-&gt;getWriterPart('contenttypes')-&gt;writeContentTypes($this-&gt;_imageTypes, $extensions, $_cHdrs, $_cFtrs));          \n        $objZip-&gt;addFromString('_rels/.rels', $this-&gt;getWriterPart('rels')-&gt;writeRelationships($this-&gt;_document));\n        $objZip-&gt;addFromString('docProps/app.xml', $this-&gt;getWriterPart('docprops')-&gt;writeDocPropsApp($this-&gt;_document));\n        $objZip-&gt;addFromString('docProps/core.xml', $this-&gt;getWriterPart('docprops')-&gt;writeDocPropsCore($this-&gt;_document));\n        $objZip-&gt;addFromString('word/document.xml', $this-&gt;getWriterPart('document')-&gt;writeDocument($this-&gt;_document));\n        $objZip-&gt;addFromString('word/_rels/document.xml.rels', $this-&gt;getWriterPart('documentrels')-&gt;writeDocumentRels($sectionElements));\n        $objZip-&gt;addFromString('word/styles.xml', $this-&gt;getWriterPart('styles')-&gt;writeStyles($this-&gt;_document));\n\n        // Write static files\n        $objZip-&gt;addFile(PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/numbering.xml', 'word/numbering.xml');\n        $objZip-&gt;addFile(PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/settings.xml', 'word/settings.xml');\n        $objZip-&gt;addFile(PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/theme1.xml', 'word/theme/theme1.xml');\n        $objZip-&gt;addFile(PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/webSettings.xml', 'word/webSettings.xml');\n        $objZip-&gt;addFile(PHPWORD_BASE_PATH . 'PHPWord/_staticDocParts/fontTable.xml', 'word/fontTable.xml');\n\n\n        // Close file\n        if($objZip-&gt;close() === false) {\n            throw new Exception(&quot;Could not close zip file $pFilename.&quot;);\n        }\n\n        // If a temporary file was used, copy it to the correct file stream\n        if($originalFilename != $pFilename) {\n            if (copy($pFilename, $originalFilename) === false) {\n                throw new Exception(&quot;Could not copy temporary zip file $pFilename to $originalFilename.&quot;);\n            }\n            @unlink($pFilename);\n        }\n    } else {\n        throw new Exception(&quot;PHPWord object unassigned.&quot;);\n    }\n}\n\nprivate function _chkContentTypes($src) {\n    $srcInfo   = pathinfo($src);\n    $extension = strtolower($srcInfo['extension']);\n    if(substr($extension, 0, 3) == 'php') {\n        $extension = 'php';\n    }\n    $_supportedImageTypes = array('jpg', 'jpeg', 'gif', 'png', 'bmp', 'tif', 'tiff', 'php');\n\n    if(in_array($extension, $_supportedImageTypes)) {\n        $imagedata = getimagesize($src);\n        $imagetype = image_type_to_mime_type($imagedata[2]);\n        $imageext = image_type_to_extension($imagedata[2]);\n        $imageext = str_replace('.', '', $imageext);\n        if($imageext == 'jpeg') $imageext = 'jpg';\n\n        if(!in_array($imagetype, $this-&gt;_imageTypes)) {\n            $this-&gt;_imageTypes[$imageext] = $imagetype;\n        }\n    } else {\n        if(!in_array($extension, $this-&gt;_objectTypes)) {\n            $this-&gt;_objectTypes[] = $extension;\n        }\n    }\n}\n\npublic function getWriterPart($pPartName = '') {\n    if ($pPartName != '' &amp;&amp; isset($this-&gt;_writerParts[strtolower($pPartName)])) {\n        return $this-&gt;_writerParts[strtolower($pPartName)];\n    } else {\n        return null;\n    }\n}\n\npublic function getUseDiskCaching() {\n    return $this-&gt;_useDiskCaching;\n}\n\npublic function setUseDiskCaching($pValue = false, $pDirectory = null) {\n    $this-&gt;_useDiskCaching = $pValue;\n\n    if (!is_null($pDirectory)) {\n        if (is_dir($pDirectory)) {\n            $this-&gt;_diskCachingDirectory = $pDirectory;\n        } else {\n            throw new Exception(&quot;Directory does not exist: $pDirectory&quot;);\n        }\n    }\n\n    return $this;\n}\n\nprivate function _addFileToPackage($objZip, $element) {\n    if(isset($element['isMemImage']) &amp;&amp; $element['isMemImage']) {\n        $image = call_user_func($element['createfunction'], $element['source']);\n        ob_start();\n        call_user_func($element['imagefunction'], $image);\n        $imageContents = ob_get_contents();\n        ob_end_clean();\n        $objZip-&gt;addFromString('word/'.$element['target'], $imageContents);\n        imagedestroy($image);\n\n        $this-&gt;_chkContentTypes($element['source']);\n    } else {\n        $objZip-&gt;addFile($element['source'], 'word/'.$element['target']);\n        $this-&gt;_chkContentTypes($element['source']);\n    }\n}</code></pre>\n\n}\r<br />\n?&gt;<br />\n",
    "PostedDate": "2013-04-08T07:54:09.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027259",
    "ThreadId": "437084",
    "Html": "File document.php in PHPWord/Writer/Word2007 directory. Here I can't post the entire file in one message because it exceeds the 10000 characters limit, so I will break it up in two parts (this and the following message).\r<br />\n<br />\nPart 1 of document.php in PHPWord/Writer/Word2007 directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\nclass PHPWord_Writer_Word2007_Document extends PHPWord_Writer_Word2007_Base {<br />\n<pre><code>public function writeDocument(PHPWord $pPHPWord = null) {\n    // Create XML writer\n\n    if($this-&gt;getParentWriter()-&gt;getUseDiskCaching()) {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_DISK, $this-&gt;getParentWriter()-&gt;getDiskCachingDirectory());\n    } else {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_MEMORY);\n    }\n\n    // XML header\n    $objWriter-&gt;startDocument('1.0','UTF-8','yes');\n\n    // w:document\n    $objWriter-&gt;startElement('w:document');\n\n    $objWriter-&gt;writeAttribute('xmlns:ve', 'http://schemas.openxmlformats.org/markup-compatibility/2006');\n    $objWriter-&gt;writeAttribute('xmlns:o', 'urn:schemas-microsoft-com:office:office');\n    $objWriter-&gt;writeAttribute('xmlns:r', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships');\n    $objWriter-&gt;writeAttribute('xmlns:m', 'http://schemas.openxmlformats.org/officeDocument/2006/math');\n    $objWriter-&gt;writeAttribute('xmlns:v', 'urn:schemas-microsoft-com:vml');\n    $objWriter-&gt;writeAttribute('xmlns:wp', 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing');\n    $objWriter-&gt;writeAttribute('xmlns:w10', 'urn:schemas-microsoft-com:office:word');\n    $objWriter-&gt;writeAttribute('xmlns:w', 'http://schemas.openxmlformats.org/wordprocessingml/2006/main');\n    $objWriter-&gt;writeAttribute('xmlns:wne', 'http://schemas.microsoft.com/office/word/2006/wordml');\n\n    $objWriter-&gt;startElement('w:body');\n\n    $_sections = $pPHPWord-&gt;getSections();\n    $countSections = count($_sections);\n    $pSection = 0;\n\n    if($countSections &gt; 0) {\n        foreach($_sections as $section) {\n            $pSection++;\n\n            $_elements = $section-&gt;getElements();\n\n            foreach($_elements as $element) {\n                if($element instanceof PHPWord_Section_Text) {\n                    $this-&gt;_writeText($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_TextRun) {\n                    $this-&gt;_writeTextRun($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_Link) {\n                    $this-&gt;_writeLink($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_Title) {\n                    $this-&gt;_writeTitle($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_TextBreak) {\n                    $this-&gt;_writeTextBreak($objWriter);\n                } elseif($element instanceof PHPWord_Section_PageBreak) {\n                    $this-&gt;_writePageBreak($objWriter);\n                } elseif($element instanceof PHPWord_Section_Table) {\n                    $this-&gt;_writeTable($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_ListItem) {\n                    $this-&gt;_writeListItem($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_Image ||\n                         $element instanceof PHPWord_Section_MemoryImage) {\n                    $this-&gt;_writeImage($objWriter, $element);\n                } elseif($element instanceof PHPWord_Section_Object) {\n                    $this-&gt;_writeObject($objWriter, $element);\n                } elseif($element instanceof PHPWord_TOC) {\n                    $this-&gt;_writeTOC($objWriter);\n                }\n            }\n\n            if($pSection == $countSections) {\n                $this-&gt;_writeEndSection($objWriter, $section);\n            } else {\n                $this-&gt;_writeSection($objWriter, $section);\n            }\n        }\n    }\n\n    $objWriter-&gt;endElement(); // End w:body\n    $objWriter-&gt;endElement(); // End w:document\n\n    // Return\n    return $objWriter-&gt;getData();\n}\n\nprivate function _writeSection(PHPWord_Shared_XMLWriter $objWriter = null, PHPWord_Section $section) {\n    $objWriter-&gt;startElement('w:p');\n        $objWriter-&gt;startElement('w:pPr');\n            $this-&gt;_writeEndSection($objWriter, $section, 3);\n        $objWriter-&gt;endElement();\n    $objWriter-&gt;endElement();\n}\n\nprivate function _writeEndSection(PHPWord_Shared_XMLWriter $objWriter = null, PHPWord_Section $section) {\n    $_settings = $section-&gt;getSettings();\n    $_header = $section-&gt;getHeader();\n    $_footer = $section-&gt;getFooter();\n    $pgSzW = $_settings-&gt;getPageSizeW();\n    $pgSzH = $_settings-&gt;getPageSizeH();\n    $orientation = $_settings-&gt;getOrientation();\n\n    $marginTop = $_settings-&gt;getMarginTop();\n    $marginLeft = $_settings-&gt;getMarginLeft();\n    $marginRight = $_settings-&gt;getMarginRight();\n    $marginBottom = $_settings-&gt;getMarginBottom();\n\n    $borders = $_settings-&gt;getBorderSize();\n\n    $objWriter-&gt;startElement('w:sectPr');\n\n        if(!is_null($_header)) {\n            $rId = $_header-&gt;getRelationId();\n            $objWriter-&gt;startElement('w:headerReference');\n                $objWriter-&gt;writeAttribute('w:type', 'default');\n                $objWriter-&gt;writeAttribute('r:id', 'rId'.$rId);\n            $objWriter-&gt;endElement();\n        }\n\n        if(!is_null($_footer)) {\n            $rId = $_footer-&gt;getRelationId();\n            $objWriter-&gt;startElement('w:footerReference');\n                $objWriter-&gt;writeAttribute('w:type', 'default');\n                $objWriter-&gt;writeAttribute('r:id', 'rId'.$rId);\n            $objWriter-&gt;endElement();\n        }\n\n        $objWriter-&gt;startElement('w:pgSz');\n            $objWriter-&gt;writeAttribute('w:w', $pgSzW);\n            $objWriter-&gt;writeAttribute('w:h', $pgSzH);\n\n            if(!is_null($orientation) &amp;&amp; strtolower($orientation) != 'portrait') {\n                $objWriter-&gt;writeAttribute('w:orient', $orientation);\n            }\n\n        $objWriter-&gt;endElement();\n\n        $objWriter-&gt;startElement('w:pgMar');\n            $objWriter-&gt;writeAttribute('w:top', $marginTop);\n            $objWriter-&gt;writeAttribute('w:right', $marginRight);\n            $objWriter-&gt;writeAttribute('w:bottom', $marginBottom);\n            $objWriter-&gt;writeAttribute('w:left', $marginLeft);\n            $objWriter-&gt;writeAttribute('w:header', '720');\n            $objWriter-&gt;writeAttribute('w:footer', '720');\n            $objWriter-&gt;writeAttribute('w:gutter', '0');\n        $objWriter-&gt;endElement();\n\n\n        if(!is_null($borders[0]) || !is_null($borders[1]) || !is_null($borders[2]) || !is_null($borders[3])) {\n            $borderColor = $_settings-&gt;getBorderColor();\n\n            $objWriter-&gt;startElement('w:pgBorders');\n                $objWriter-&gt;writeAttribute('w:offsetFrom', 'page');\n\n                if(!is_null($borders[0])) {\n                    $objWriter-&gt;startElement('w:top');\n                        $objWriter-&gt;writeAttribute('w:val', 'single');\n                        $objWriter-&gt;writeAttribute('w:sz', $borders[0]);\n                        $objWriter-&gt;writeAttribute('w:space', '24');\n                        $objWriter-&gt;writeAttribute('w:color', $borderColor[0]);\n                    $objWriter-&gt;endElement();\n                }\n\n                if(!is_null($borders[1])) {\n                    $objWriter-&gt;startElement('w:left');\n                        $objWriter-&gt;writeAttribute('w:val', 'single');\n                        $objWriter-&gt;writeAttribute('w:sz', $borders[1]);\n                        $objWriter-&gt;writeAttribute('w:space', '24');\n                        $objWriter-&gt;writeAttribute('w:color', $borderColor[1]);\n                    $objWriter-&gt;endElement();\n                }\n\n                if(!is_null($borders[2])) {\n                    $objWriter-&gt;startElement('w:right');\n                        $objWriter-&gt;writeAttribute('w:val', 'single');\n                        $objWriter-&gt;writeAttribute('w:sz', $borders[2]);\n                        $objWriter-&gt;writeAttribute('w:space', '24');\n                        $objWriter-&gt;writeAttribute('w:color', $borderColor[2]);\n                    $objWriter-&gt;endElement();\n                }\n\n                if(!is_null($borders[3])) {\n                    $objWriter-&gt;startElement('w:bottom');\n                        $objWriter-&gt;writeAttribute('w:val', 'single');\n                        $objWriter-&gt;writeAttribute('w:sz', $borders[3]);\n                        $objWriter-&gt;writeAttribute('w:space', '24');\n                        $objWriter-&gt;writeAttribute('w:color', $borderColor[3]);\n                    $objWriter-&gt;endElement();\n                }\n            $objWriter-&gt;endElement();\n        }\n\n\n        $objWriter-&gt;startElement('w:cols');\n            $objWriter-&gt;writeAttribute('w:space', '720');\n        $objWriter-&gt;endElement();\n\n\n    $objWriter-&gt;endElement();\n}\n\nprivate function _writePageBreak(PHPWord_Shared_XMLWriter $objWriter = null) {\n    $objWriter-&gt;startElement('w:p');\n        $objWriter-&gt;startElement('w:r');\n            $objWriter-&gt;startElement('w:br');\n                $objWriter-&gt;writeAttribute('w:type', 'page');\n            $objWriter-&gt;endElement();\n        $objWriter-&gt;endElement();\n    $objWriter-&gt;endElement();\n}\n</code></pre>\n\n",
    "PostedDate": "2013-04-08T08:01:21.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027260",
    "ThreadId": "437084",
    "Html": "Part 2 of document.php in PHPWord/Writer/Word2007 directory:<br />\n<pre><code>private function _writeListItem(PHPWord_Shared_XMLWriter $objWriter = null, PHPWord_Section_ListItem $listItem) {\n    $textObject = $listItem-&gt;getTextObject();\n    $text = $textObject-&gt;getText();\n    $styleParagraph = $textObject-&gt;getParagraphStyle();\n    $SpIsObject = ($styleParagraph instanceof PHPWord_Style_Paragraph) ? true : false;\n\n    $depth = $listItem-&gt;getDepth();\n    $listType = $listItem-&gt;getStyle()-&gt;getListType();\n\n    $objWriter-&gt;startElement('w:p');\n        $objWriter-&gt;startElement('w:pPr');\n\n            if($SpIsObject) {\n                $this-&gt;_writeParagraphStyle($objWriter, $styleParagraph, true);\n            } elseif(!$SpIsObject &amp;&amp; !is_null($styleParagraph)) {\n                $objWriter-&gt;startElement('w:pStyle');\n                    $objWriter-&gt;writeAttribute('w:val', $styleParagraph);\n                $objWriter-&gt;endElement();\n            }\n\n            $objWriter-&gt;startElement('w:numPr');\n\n                $objWriter-&gt;startElement('w:ilvl');\n                    $objWriter-&gt;writeAttribute('w:val', $depth);\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:numId');\n                    $objWriter-&gt;writeAttribute('w:val', $listType);\n                $objWriter-&gt;endElement();\n\n            $objWriter-&gt;endElement();\n        $objWriter-&gt;endElement();\n\n        $this-&gt;_writeText($objWriter, $textObject, true);\n\n    $objWriter-&gt;endElement();\n}\n\nprotected function _writeObject(PHPWord_Shared_XMLWriter $objWriter = null, PHPWord_Section_Object $object) {\n    $rIdObject = $object-&gt;getRelationId();\n    $rIdImage = $object-&gt;getImageRelationId();\n    $shapeId = md5($rIdObject.'_'.$rIdImage);\n\n    $objectId = $object-&gt;getObjectId();\n\n    $style = $object-&gt;getStyle();\n    $width = $style-&gt;getWidth();\n    $height = $style-&gt;getHeight();\n    $align = $style-&gt;getAlign();\n\n    $progid = array ('xls' =&gt; 'Excel.Sheet.8', 'xlsx' =&gt; 'Excel.Sheet.12', 'doc' =&gt; 'Word.Document.8', 'docx' =&gt; 'Word.Document.12', 'ppt' =&gt; 'PowerPoint.Show.8', 'pptx' =&gt; 'PowerPoint.Show.12');\n    $src = $object-&gt;getSource();\n    $inf = pathinfo($src);\n    $ext = strtolower($inf['extension']); \n\n    $objWriter-&gt;startElement('w:p');\n\n        if(!is_null($align)) {\n            $objWriter-&gt;startElement('w:pPr');\n                $objWriter-&gt;startElement('w:jc');\n                    $objWriter-&gt;writeAttribute('w:val', $align);\n                $objWriter-&gt;endElement();\n            $objWriter-&gt;endElement();\n        }\n\n        $objWriter-&gt;startElement('w:r');\n\n            $objWriter-&gt;startElement('w:object');\n            $objWriter-&gt;writeAttribute('w:dxaOrig', '249');\n            $objWriter-&gt;writeAttribute('w:dyaOrig', '160');\n\n                $objWriter-&gt;startElement('v:shape');\n                $objWriter-&gt;writeAttribute('id', $shapeId);\n                $objWriter-&gt;writeAttribute('type', '#_x0000_t75');\n                $objWriter-&gt;writeAttribute('style', 'width:104px;height:67px');\n                $objWriter-&gt;writeAttribute('o:ole', '');\n\n                    $objWriter-&gt;startElement('v:imagedata');\n                    $objWriter-&gt;writeAttribute('r:id', 'rId'.$rIdImage);\n                    $objWriter-&gt;writeAttribute('o:title', '');\n                    $objWriter-&gt;endElement();\n\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('o:OLEObject');\n                $objWriter-&gt;writeAttribute('Type', 'Embed');\n                // $objWriter-&gt;writeAttribute('ProgID', 'Package');\n                $objWriter-&gt;writeAttribute('ProgID', $progid[$ext]);\n                $objWriter-&gt;writeAttribute('ShapeID', $shapeId);\n                $objWriter-&gt;writeAttribute('DrawAspect', 'Icon');\n                $objWriter-&gt;writeAttribute('ObjectID', '_'.$objectId);\n                $objWriter-&gt;writeAttribute('r:id', 'rId'.$rIdObject);\n                $objWriter-&gt;endElement();\n\n            $objWriter-&gt;endElement();\n\n        $objWriter-&gt;endElement(); // w:r\n\n    $objWriter-&gt;endElement(); // w:p\n}\n\nprivate function _writeTOC(PHPWord_Shared_XMLWriter $objWriter = null) {\n    $titles = PHPWord_TOC::getTitles();\n    $styleFont = PHPWord_TOC::getStyleFont();\n\n    $styleTOC = PHPWord_TOC::getStyleTOC();\n    $fIndent = $styleTOC-&gt;getIndent();\n    $tabLeader = $styleTOC-&gt;getTabLeader();\n    $tabPos = $styleTOC-&gt;getTabPos();\n\n    $isObject = ($styleFont instanceof PHPWord_Style_Font) ? true : false;\n\n    for($i=0; $i&lt;count($titles); $i++) {\n        $title = $titles[$i];\n        $indent = ($title['depth'] - 1) * $fIndent;\n\n        $objWriter-&gt;startElement('w:p');\n\n            $objWriter-&gt;startElement('w:pPr');\n\n                if($isObject &amp;&amp; !is_null($styleFont-&gt;getParagraphStyle())) {\n                    $this-&gt;_writeParagraphStyle($objWriter, $styleFont-&gt;getParagraphStyle());\n                }\n\n                if($indent &gt; 0) {\n                    $objWriter-&gt;startElement('w:ind');\n                        $objWriter-&gt;writeAttribute('w:left', $indent);\n                    $objWriter-&gt;endElement();\n                }\n\n                if(!empty($styleFont) &amp;&amp; !$isObject) {\n                    $objWriter-&gt;startElement('w:pPr');\n                        $objWriter-&gt;startElement('w:pStyle');\n                            $objWriter-&gt;writeAttribute('w:val', $styleFont);\n                        $objWriter-&gt;endElement();\n                    $objWriter-&gt;endElement();\n                }\n\n                $objWriter-&gt;startElement('w:tabs');\n                    $objWriter-&gt;startElement('w:tab');\n                        $objWriter-&gt;writeAttribute('w:val', 'right');\n                        if(!empty($tabLeader)) {\n                            $objWriter-&gt;writeAttribute('w:leader', $tabLeader);\n                        }\n                        $objWriter-&gt;writeAttribute('w:pos', $tabPos);\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n            $objWriter-&gt;endElement(); // w:pPr\n\n\n            if($i == 0) {\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:fldChar');\n                        $objWriter-&gt;writeAttribute('w:fldCharType', 'begin');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:instrText');\n                        $objWriter-&gt;writeAttribute('xml:space', 'preserve');\n                        $objWriter-&gt;writeRaw('TOC \\o &quot;1-9&quot; \\h \\z \\u');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:fldChar');\n                        $objWriter-&gt;writeAttribute('w:fldCharType', 'separate');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n            }\n\n            $objWriter-&gt;startElement('w:hyperlink');\n                $objWriter-&gt;writeAttribute('w:anchor', $title['anchor']);\n                $objWriter-&gt;writeAttribute('w:history', '1');\n\n                $objWriter-&gt;startElement('w:r');\n\n                    if($isObject) {\n                        $this-&gt;_writeTextStyle($objWriter, $styleFont);\n                    }\n\n                    $objWriter-&gt;startElement('w:t');\n                        $objWriter-&gt;writeRaw($title['text']);\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;writeElement('w:tab', null);\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:fldChar');\n                        $objWriter-&gt;writeAttribute('w:fldCharType', 'begin');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:instrText');\n                        $objWriter-&gt;writeAttribute('xml:space', 'preserve');\n                        $objWriter-&gt;writeRaw('PAGEREF '.$title['anchor'].' \\h');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n                $objWriter-&gt;startElement('w:r');\n                    $objWriter-&gt;startElement('w:fldChar');\n                        $objWriter-&gt;writeAttribute('w:fldCharType', 'end');\n                    $objWriter-&gt;endElement();\n                $objWriter-&gt;endElement();\n\n            $objWriter-&gt;endElement(); // w:hyperlink\n\n        $objWriter-&gt;endElement(); // w:p\n    }\n\n    $objWriter-&gt;startElement('w:p');\n        $objWriter-&gt;startElement('w:r');\n            $objWriter-&gt;startElement('w:fldChar');\n                $objWriter-&gt;writeAttribute('w:fldCharType', 'end');\n            $objWriter-&gt;endElement();\n        $objWriter-&gt;endElement();\n    $objWriter-&gt;endElement();\n}</code></pre>\n\n}<br />\n",
    "PostedDate": "2013-04-08T08:02:17.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027263",
    "ThreadId": "437084",
    "Html": "File DocumentRels.php in PHPWord/Writer/Word2007 directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\nclass PHPWord_Writer_Word2007_DocumentRels extends PHPWord_Writer_Word2007_WriterPart {<br />\n<pre><code>public function writeDocumentRels($_relsCollection) {\n    // Create XML writer\n    $objWriter = null;\n    if ($this-&gt;getParentWriter()-&gt;getUseDiskCaching()) {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_DISK, $this-&gt;getParentWriter()-&gt;getDiskCachingDirectory());\n    } else {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_MEMORY);\n    }\n\n    // XML header\n    $objWriter-&gt;startDocument('1.0','UTF-8','yes');\n\n    // Relationships\n    $objWriter-&gt;startElement('Relationships');\n    $objWriter-&gt;writeAttribute('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n        // Relationship word/document.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            1,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n            'styles.xml'\n        );\n\n        // Relationship word/numbering.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            2,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering',\n            'numbering.xml'\n        );\n\n        // Relationship word/settings.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            3,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings',\n            'settings.xml'\n        );\n\n        // Relationship word/settings.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            4,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n            'theme/theme1.xml'\n        );\n\n        // Relationship word/settings.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            5,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings',\n            'webSettings.xml'\n        );\n\n        // Relationship word/settings.xml\n        $this-&gt;_writeRelationship(\n            $objWriter,\n            6,\n            'http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable',\n            'fontTable.xml'\n        );\n\n        // Relationships to Images / Embeddings / Headers / Footers\n        foreach($_relsCollection as $relation) {\n            $relationType = $relation['type'];\n            $relationName = $relation['target'];\n            $relationId = $relation['rID'];\n            $targetMode = ($relationType == 'hyperlink') ? 'External' : '';\n            if (in_array ($relationType, array ('xlsx', 'docx', 'pptx'))) $relationType = 'package';\n            elseif (in_array ($relationType, array ('xls', 'doc', 'ppt'))) $relationType = 'oleObject';\n\n            $this-&gt;_writeRelationship(\n                $objWriter,\n                $relationId,\n                'http://schemas.openxmlformats.org/officeDocument/2006/relationships/'.$relationType,\n                $relationName,\n                $targetMode\n            );\n        }\n\n\n    $objWriter-&gt;endElement();\n\n    // Return\n    return $objWriter-&gt;getData();\n}\n\npublic function writeHeaderFooterRels($_relsCollection) {\n    // Create XML writer\n    $objWriter = null;\n    if ($this-&gt;getParentWriter()-&gt;getUseDiskCaching()) {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_DISK, $this-&gt;getParentWriter()-&gt;getDiskCachingDirectory());\n    } else {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_MEMORY);\n    }\n\n    // XML header\n    $objWriter-&gt;startDocument('1.0','UTF-8','yes');\n\n    // Relationships\n    $objWriter-&gt;startElement('Relationships');\n    $objWriter-&gt;writeAttribute('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n        // Relationships to Images / Embeddings / Headers / Footers\n        foreach($_relsCollection as $relation) {\n            $relationType = $relation['type'];\n            $relationName = $relation['target'];\n            $relationId = $relation['rID'];\n\n            $this-&gt;_writeRelationship(\n                $objWriter,\n                $relationId,\n                'http://schemas.openxmlformats.org/officeDocument/2006/relationships/'.$relationType,\n                $relationName\n            );\n        }\n\n\n    $objWriter-&gt;endElement();\n\n    // Return\n    return $objWriter-&gt;getData();\n}\n\nprivate function _writeRelationship(PHPWord_Shared_XMLWriter $objWriter = null, $pId = 1, $pType = '', $pTarget = '', $pTargetMode = '') {\n    if($pType != '' &amp;&amp; $pTarget != '') {\n        if(strpos($pId, 'rId') === false) {\n            $pId = 'rId' . $pId;\n        }\n\n        // Write relationship\n        $objWriter-&gt;startElement('Relationship');\n        $objWriter-&gt;writeAttribute('Id', $pId);\n        $objWriter-&gt;writeAttribute('Type', $pType);\n        $objWriter-&gt;writeAttribute('Target', $pTarget);\n\n        if($pTargetMode != '') {\n            $objWriter-&gt;writeAttribute('TargetMode', $pTargetMode);\n        }\n\n        $objWriter-&gt;endElement();\n    } else {\n        throw new Exception(&quot;Invalid parameters passed.&quot;);\n    }\n}</code></pre>\n\n}\r<br />\n?&gt;<br />\n",
    "PostedDate": "2013-04-08T08:03:20.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027266",
    "ThreadId": "437084",
    "Html": "File ContentTypes.php in PHPWord/Writer/Word2007 directory:\r<br />\n<br />\n&lt;?php\r<br />\n/**<br />\n<ul>\n<li>PHPWord\r<br />\n *</li>\n<li>Copyright (c) 2011 PHPWord\r<br />\n *</li>\n<li>This library is free software; you can redistribute it and/or</li>\n<li>modify it under the terms of the GNU Lesser General Public</li>\n<li>License as published by the Free Software Foundation; either</li>\n<li>version 2.1 of the License, or (at your option) any later version.\r<br />\n *</li>\n<li>This library is distributed in the hope that it will be useful,</li>\n<li>but WITHOUT ANY WARRANTY; without even the implied warranty of</li>\n<li>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</li>\n<li>Lesser General Public License for more details.\r<br />\n *</li>\n<li>You should have received a copy of the GNU Lesser General Public</li>\n<li>License along with this library; if not, write to the Free Software</li>\n<li>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r<br />\n *</li>\n<li>@category   PHPWord</li>\n<li>@package    PHPWord</li>\n<li>@copyright  Copyright (c) 010 PHPWord</li>\n<li>@license    <a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt</a>    LGPL</li>\n<li>\n@version    Beta 0.6.3, 08.07.2011\r<br />\n */<br />\n</li>\n</ul>\nclass PHPWord_Writer_Word2007_ContentTypes extends PHPWord_Writer_Word2007_WriterPart {<br />\n<pre><code>public function writeContentTypes($_imageTypes, $_objectTypes, $_cHdrs, $_cFtrs) {\n    // Create XML writer\n    $objWriter = null;\n    if ($this-&gt;getParentWriter()-&gt;getUseDiskCaching()) {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_DISK, $this-&gt;getParentWriter()-&gt;getDiskCachingDirectory());\n    } else {\n        $objWriter = new PHPWord_Shared_XMLWriter(PHPWord_Shared_XMLWriter::STORAGE_MEMORY);\n    }\n\n    // XML header\n    $objWriter-&gt;startDocument('1.0', 'UTF-8', 'yes');\n\n    $cont_type = array ('xls' =&gt; 'application/vnd.ms-excel', \n                        'docx' =&gt; 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', \n                        'ppt' =&gt; 'application/vnd.ms-powerpoint', \n                        'pptx' =&gt; 'application/vnd.openxmlformats-officedocument.presentationml.presentation', \n                        'xlsx' =&gt; 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', \n                        'doc' =&gt; 'application/msword');\n\n    // Types\n    $objWriter-&gt;startElement('Types');\n    $objWriter-&gt;writeAttribute('xmlns', 'http://schemas.openxmlformats.org/package/2006/content-types');\n\n        // Rels\n        $this-&gt;_writeDefaultContentType(\n            $objWriter, 'rels', 'application/vnd.openxmlformats-package.relationships+xml'\n        );\n\n        // XML\n        $this-&gt;_writeDefaultContentType(\n            $objWriter, 'xml', 'application/xml'\n        );\n\n        // Add media content-types\n        foreach($_imageTypes as $key =&gt; $value) {\n            $this-&gt;_writeDefaultContentType($objWriter, $key, $value);\n        }\n\n        // Add embedding content-types\n        // if(count($_objectTypes) &gt; 0) {\n        foreach ($_objectTypes as $obj) {\n            if (isset($cont_type[$obj])) $this-&gt;_writeDefaultContentType($objWriter, $obj, $cont_type[$obj]);\n            // $this-&gt;_writeDefaultContentType($objWriter, 'bin', 'application/vnd.openxmlformats-officedocument.oleObject');\n        }\n\n        // DocProps\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/docProps/app.xml', 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\n        );\n\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/docProps/core.xml', 'application/vnd.openxmlformats-package.core-properties+xml'\n        );\n\n        // Document\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/document.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'\n        );\n\n        // Styles\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/styles.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml'\n        );\n\n        // Numbering\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/numbering.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml'\n        );\n\n        // Settings\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/settings.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml'\n        );\n\n        // Theme1\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/theme/theme1.xml', 'application/vnd.openxmlformats-officedocument.theme+xml'\n        );\n\n        // WebSettings\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/webSettings.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml'\n        );\n\n        // Font Table\n        $this-&gt;_writeOverrideContentType(\n            $objWriter, '/word/fontTable.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml'\n        );\n\n        for($i=1; $i&lt;=$_cHdrs; $i++) {\n            $this-&gt;_writeOverrideContentType(\n                $objWriter, '/word/header'.$i.'.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml'\n            );\n        }\n\n        for($i=1; $i&lt;=$_cFtrs; $i++) {\n            $this-&gt;_writeOverrideContentType(\n                $objWriter, '/word/footer'.$i.'.xml', 'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml'\n            );\n        }\n\n\n    $objWriter-&gt;endElement();\n\n    // Return\n    return $objWriter-&gt;getData();\n}\n\n/**\n * Get image mime type\n *\n * @param   string  $pFile  Filename\n * @return  string  Mime Type\n * @throws  Exception\n */\nprivate function _getImageMimeType($pFile = '') {\n    if(PHPWord_Shared_File::file_exists($pFile)) {\n        $image = getimagesize($pFile);\n        return image_type_to_mime_type($image[2]);\n    } else {\n        throw new Exception(&quot;File $pFile does not exist&quot;);\n    }\n}\n\n/**\n * Write Default content type\n *\n * @param   PHPWord_Shared_XMLWriter    $objWriter      XML Writer\n * @param   string                      $pPartname      Part name\n * @param   string                      $pContentType   Content type\n * @throws  Exception\n */\nprivate function _writeDefaultContentType(PHPWord_Shared_XMLWriter $objWriter = null, $pPartname = '', $pContentType = '') {\n    if($pPartname != '' &amp;&amp; $pContentType != '') {\n        // Write content type\n        $objWriter-&gt;startElement('Default');\n        $objWriter-&gt;writeAttribute('Extension',     $pPartname);\n        $objWriter-&gt;writeAttribute('ContentType',   $pContentType);\n        $objWriter-&gt;endElement();\n    } else {\n        throw new Exception(&quot;Invalid parameters passed.&quot;);\n    }\n}\n\n/**\n * Write Override content type\n *\n * @param   PHPPowerPoint_Shared_XMLWriter  $objWriter      XML Writer\n * @param   string                      $pPartname      Part name\n * @param   string                      $pContentType   Content type\n * @throws  Exception\n */\nprivate function _writeOverrideContentType(PHPWord_Shared_XMLWriter $objWriter = null, $pPartname = '', $pContentType = '') {\n    if($pPartname != '' &amp;&amp; $pContentType != '') {\n        // Write content type\n        $objWriter-&gt;startElement('Override');\n        $objWriter-&gt;writeAttribute('PartName',      $pPartname);\n        $objWriter-&gt;writeAttribute('ContentType',   $pContentType);\n        $objWriter-&gt;endElement();\n    } else {\n        throw new Exception(&quot;Invalid parameters passed.&quot;);\n    }\n}</code></pre>\n\n}<br />\n",
    "PostedDate": "2013-04-08T08:04:16.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]